'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.















addRoutes = addRoutes;exports.



















Route = Route;var _assert = require('assert');var _assert2 = _interopRequireDefault(_assert);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} //support async/promise route handlers and non promise handlers
//args 0 req, 1 res, 2 next 
const asyncWrap = fn => (...args) => {try {let res = fn(...args);if (res instanceof Promise) {res.then(args[2]).catch(args[2]);}} catch (err) {args[2](err);}};function addRoutes(router, functionFactory) {(0, _assert2.default)(functionFactory);let inst = functionFactory();if (typeof inst === 'object') {let prot = Object.getPrototypeOf(inst);let routeMethods = Object.getOwnPropertyNames(prot).filter(n => !!prot[n].$route).map(n => prot[n]);routeMethods.forEach(m => {router[m.$route.verb](m.$route.path, [...(m.$route.middleware || []), asyncWrap(m.bind(inst))]);});} else if (typeof inst === 'function' && inst.$route) {router[inst.$route.verb](inst.$route.path, [...(inst.$route.middleware || []), asyncWrap(inst)]);}}function Route(verb, path, ...middleware) {return function decorator(target, key) {
        //console.log(typeof(target));
        let namepath = target.name || target.constructor.name;
        namepath = (namepath || '') + (key && namepath ? '/' + key : key || '');
        if (!verb) verb = 'get';
        if (!path) path = `/${ namepath }`;
        (key ? target[key] : target).$route = { verb, path, middleware };};}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWNvcm91dGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQmdCLFMsR0FBQSxTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQSxLLEdBQUEsSyxDQXBDaEIsZ0M7O0FBSUEsTUFBTSxZQUFZLE1BQU0sQ0FBQyxHQUFHLElBQUosS0FBYSxDQUNqQyxJQUFHLENBQ0MsSUFBSSxNQUFNLEdBQUcsR0FBRyxJQUFOLENBQVYsQ0FDQSxJQUFHLGVBQWUsT0FBbEIsRUFBMkIsQ0FDdkIsSUFBSSxJQUFKLENBQVMsS0FBSyxDQUFMLENBQVQsRUFBa0IsS0FBbEIsQ0FBd0IsS0FBSyxDQUFMLENBQXhCLEVBQ0gsQ0FDSixDQUxELENBS0UsT0FBTSxHQUFOLEVBQVcsQ0FDVCxLQUFLLENBQUwsRUFBUSxHQUFSLEVBQ0gsQ0FDSixDQVRELENBWU8sU0FBUyxTQUFULENBQW1CLE1BQW5CLEVBQTJCLGVBQTNCLEVBQTRDLENBRS9DLHNCQUFPLGVBQVAsRUFFQSxJQUFJLE9BQU8saUJBQVgsQ0FDQSxJQUFHLE9BQU8sSUFBUCxLQUFnQixRQUFuQixFQUE2QixDQUN6QixJQUFJLE9BQVEsT0FBTyxjQUFQLENBQXNCLElBQXRCLENBQVosQ0FDQSxJQUFJLGVBQWUsT0FBTyxtQkFBUCxDQUEyQixJQUEzQixFQUNkLE1BRGMsQ0FDTixDQUFELElBQU8sQ0FBQyxDQUFDLEtBQUssQ0FBTCxFQUFRLE1BRFYsRUFFZCxHQUZjLENBRVQsS0FBSyxLQUFLLENBQUwsQ0FGSSxDQUFuQixDQUlBLGFBQWEsT0FBYixDQUFzQixDQUFELElBQU8sQ0FDeEIsT0FBTyxFQUFFLE1BQUYsQ0FBUyxJQUFoQixFQUFzQixFQUFFLE1BQUYsQ0FBUyxJQUEvQixFQUFxQyxDQUFDLElBQUksRUFBRSxNQUFGLENBQVMsVUFBVCxJQUF1QixFQUEzQixDQUFELEVBQWlDLFVBQVUsRUFBRSxJQUFGLENBQU8sSUFBUCxDQUFWLENBQWpDLENBQXJDLEVBQ0gsQ0FGRCxFQUdILENBVEQsTUFVSyxJQUFHLE9BQU8sSUFBUCxLQUFnQixVQUFoQixJQUE4QixLQUFLLE1BQXRDLEVBQThDLENBQy9DLE9BQU8sS0FBSyxNQUFMLENBQVksSUFBbkIsRUFBeUIsS0FBSyxNQUFMLENBQVksSUFBckMsRUFBMkMsQ0FBQyxJQUFJLEtBQUssTUFBTCxDQUFZLFVBQVosSUFBMEIsRUFBOUIsQ0FBRCxFQUFvQyxVQUFVLElBQVYsQ0FBcEMsQ0FBM0MsRUFDSCxDQUNKLENBRU0sU0FBUyxLQUFULENBQWUsSUFBZixFQUFxQixJQUFyQixFQUEyQixHQUFHLFVBQTlCLEVBQTBDLENBRTdDLE9BQU8sU0FBUyxTQUFULENBQW1CLE1BQW5CLEVBQTJCLEdBQTNCLEVBQWdDOztBQUVuQyxZQUFJLFdBQVcsT0FBTyxJQUFQLElBQWUsT0FBTyxXQUFQLENBQW1CLElBQWpEO0FBQ0EsbUJBQVcsQ0FBQyxZQUFZLEVBQWIsS0FBb0IsT0FBTyxRQUFQLEdBQWtCLE1BQU0sR0FBeEIsR0FBK0IsT0FBTyxFQUExRCxDQUFYO0FBQ0EsWUFBRyxDQUFDLElBQUosRUFBVSxPQUFPLEtBQVA7QUFDVixZQUFHLENBQUMsSUFBSixFQUFVLE9BQU8sQ0FBQyxDQUFELEdBQUksUUFBSixFQUFhLEFBQWIsQ0FBUDtBQUNWLFNBQUMsTUFBTSxPQUFPLEdBQVAsQ0FBTixHQUFvQixNQUFyQixFQUE2QixNQUE3QixHQUFzQyxFQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsVUFBYixFQUF0QyxDQUNILENBUEQsQ0FRSCIsImZpbGUiOiJkZWNvcm91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmYXVsdCBhcyBhc3NlcnQgfSBmcm9tICdhc3NlcnQnO1xuXG4vL3N1cHBvcnQgYXN5bmMvcHJvbWlzZSByb3V0ZSBoYW5kbGVycyBhbmQgbm9uIHByb21pc2UgaGFuZGxlcnNcbi8vYXJncyAwIHJlcSwgMSByZXMsIDIgbmV4dCBcbmNvbnN0IGFzeW5jV3JhcCA9IGZuID0+ICguLi5hcmdzKSA9PiB7XG4gICAgdHJ5e1xuICAgICAgICBsZXQgcmVzID0gZm4oLi4uYXJncyk7XG4gICAgICAgIGlmKHJlcyBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgIHJlcy50aGVuKGFyZ3NbMl0pLmNhdGNoKGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgYXJnc1syXShlcnIpO1xuICAgIH1cbn07XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJvdXRlcyhyb3V0ZXIsIGZ1bmN0aW9uRmFjdG9yeSkge1xuXG4gICAgYXNzZXJ0KGZ1bmN0aW9uRmFjdG9yeSk7XG5cbiAgICBsZXQgaW5zdCA9IGZ1bmN0aW9uRmFjdG9yeSgpO1xuICAgIGlmKHR5cGVvZiBpbnN0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBsZXQgcHJvdCA9ICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5zdCk7XG4gICAgICAgIGxldCByb3V0ZU1ldGhvZHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90KVxuICAgICAgICAgICAgLmZpbHRlcigobikgPT4gISFwcm90W25dLiRyb3V0ZSlcbiAgICAgICAgICAgIC5tYXAoKG4gPT4gcHJvdFtuXSkpO1xuXG4gICAgICAgIHJvdXRlTWV0aG9kcy5mb3JFYWNoKChtKSA9PiB7XG4gICAgICAgICAgICByb3V0ZXJbbS4kcm91dGUudmVyYl0obS4kcm91dGUucGF0aCwgWy4uLihtLiRyb3V0ZS5taWRkbGV3YXJlIHx8IFtdKSwgYXN5bmNXcmFwKG0uYmluZChpbnN0KSldKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYodHlwZW9mIGluc3QgPT09ICdmdW5jdGlvbicgJiYgaW5zdC4kcm91dGUpIHtcbiAgICAgICAgcm91dGVyW2luc3QuJHJvdXRlLnZlcmJdKGluc3QuJHJvdXRlLnBhdGgsIFsuLi4oaW5zdC4kcm91dGUubWlkZGxld2FyZSB8fCBbXSksIGFzeW5jV3JhcChpbnN0KV0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJvdXRlKHZlcmIsIHBhdGgsIC4uLm1pZGRsZXdhcmUpIHtcbiAgICBcbiAgICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwga2V5KSB7XG4gICAgICAgIC8vY29uc29sZS5sb2codHlwZW9mKHRhcmdldCkpO1xuICAgICAgICBsZXQgbmFtZXBhdGggPSB0YXJnZXQubmFtZSB8fCB0YXJnZXQuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgbmFtZXBhdGggPSAobmFtZXBhdGggfHwgJycpICsgKGtleSAmJiBuYW1lcGF0aCA/ICcvJyArIGtleSA6IChrZXkgfHwgJycpKTtcbiAgICAgICAgaWYoIXZlcmIpIHZlcmIgPSAnZ2V0JztcbiAgICAgICAgaWYoIXBhdGgpIHBhdGggPSBgLyR7bmFtZXBhdGh9YDtcbiAgICAgICAgKGtleSA/IHRhcmdldFtrZXldIDogdGFyZ2V0KS4kcm91dGUgPSB7dmVyYiwgcGF0aCwgbWlkZGxld2FyZX07XG4gICAgfTtcbn1cbiJdfQ==